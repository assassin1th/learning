/*
** std::weak_ptr используется для хранения указателя на объект который может быть уже удален
** e.g.
*/

#include <memory>

auto ptr = std::make_shared<test> ();

// week_ptr предпочтительно создавать из shared_ptr, так как он является всего лишь дополнением к последнему
std::weak_ptr<test> wptr (ptr);

// если объект будет удален мы получим висячий указатель:
ptr = nullptr;
/*
** в данный момент wptr ни на что не указывает, однако он сохраняет информацию о том что объект на который он указывал был удален
** помимо этого к объекту хранимым в wptr нельзя никак обратиться, т.к. нет соот. api
** для того чтобы получить доступ к объекту необходимо преобразовать weak_ptr в shared_ptr
** e.g.
*/

// в случае когда создать указатель нельзя создать будет брошено исключение std::bad_weak_ptr
std::shared_ptr<test> sptr1 (wptr);

// в случае когда указатель висит, т е wptr указывает на удаленный объект, sptr2 и sptr3 примут значение nullptr
std::shared_ptr<test> sptr2 = wptr.lock ();
auto sptr3 = wptr.lock ();

/*
** применять можно в области кеширования данных, списков наблюдателей и предупреждения зацикливания std::shared_ptr
** e.g.
*/
{
	static std::unordered_map<test, std::weak_ptr<test>> cache;

	auto ptr = cache[id].lock ();

	if (!ptr)
	{
		// инициализируем ptr
		cacke[id] = ptr;
	}
	return ptr
}